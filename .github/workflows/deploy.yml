name: Deploy to Production in AWS - Grêmio Brasileirão 2025

on:
  workflow_run:
    workflows: ["CI Pipeline - Grêmio Brasileirão 2025"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    # Deploy para o servidor via SSH
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Definir o diretório do projeto
          PROJECT_DIR="/home/${{ secrets.EC2_USERNAME }}/gremio-brasileirao-2025"
          
          # Remover diretório se existir e estiver corrompido, depois fazer clone limpo
          if [ -d "$PROJECT_DIR" ]; then
            echo "Removendo diretório existente..."
            rm -rf "$PROJECT_DIR"
          fi
          
          echo "Clonando repositório..."
          git clone https://github.com/pdelfino0/gremio-brasileirao-2025.git "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          echo "Verificando conteúdo do diretório:"
          ls -la
          
          # Verificar se docker-compose.yml existe
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ ERRO: docker-compose.yml não encontrado!"
            exit 1
          fi
          
          echo "✅ docker-compose.yml encontrado"
          
          # Login no GitHub Container Registry no servidor
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Parar containers existentes (sem falhar se não existirem)
          docker compose down 2>/dev/null || docker-compose down 2>/dev/null || true
          
          # Pull da imagem mais recente usando docker-compose
          docker compose pull 2>/dev/null || docker-compose pull
          
          # Remover imagens antigas para economizar espaço
          docker image prune -f
          
          # Iniciar com a nova imagem
          docker compose up -d 2>/dev/null || docker-compose up -d
          
          # Verificar se os containers estão rodando
          docker ps
          
          echo "Deploy realizado com sucesso em: $(date)"