name: Deploy to Production in AWS - Grêmio Brasileirão 2025

on:
  workflow_run:
    workflows: ["CI Pipeline - Grêmio Brasileirão 2025"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    # Deploy para o servidor via SSH
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Definir o diretório do projeto
          PROJECT_DIR="/home/${{ secrets.EC2_USERNAME }}/gremio-brasileirao-2025"
          
          # Remover diretório se existir e estiver corrompido, depois fazer clone limpo
          if [ -d "$PROJECT_DIR" ]; then
            echo "Removendo diretório existente..."
            rm -rf "$PROJECT_DIR"
          fi
          
          echo "Clonando repositório..."
          git clone https://github.com/pdelfino0/gremio-brasileiro-2025.git "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          echo "Verificando conteúdo do diretório:"
          ls -la
          
          # Verificar se docker-compose.yml existe
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ ERRO: docker-compose.yml não encontrado!"
            exit 1
          fi
          
          echo "✅ docker-compose.yml encontrado"
          
          # Verificar se Docker está instalado e rodando
          if ! command -v docker &> /dev/null; then
            echo "❌ ERRO: Docker não está instalado!"
            exit 1
          fi
          
          if ! docker info &> /dev/null; then
            echo "❌ ERRO: Docker não está rodando!"
            exit 1
          fi
          
          echo "✅ Docker está instalado e rodando"
          
          # Verificar se docker-compose está disponível
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "❌ ERRO: docker-compose não está disponível!"
            exit 1
          fi
          
          echo "✅ docker-compose está disponível"
          
          # Parar todos os containers que possam estar usando as portas
          echo "Verificando containers existentes..."
          docker ps -a --format "table {{.Names}}\t{{.Ports}}" | grep -E "(8080|8000|5432)" || true
          
          # Parar containers que possam estar usando as portas
          echo "Parando containers que usam as portas necessárias..."
          docker ps -q | xargs -r docker stop
          
          # Verificar e parar processos que possam estar usando as portas
          echo "Verificando portas em uso..."
          if command -v lsof &> /dev/null; then
            if lsof -ti:8080 > /dev/null 2>&1; then
              echo "Porta 8080 está em uso. Parando processo..."
              lsof -ti:8080 | xargs kill -9
            fi
            
            if lsof -ti:8000 > /dev/null 2>&1; then
              echo "Porta 8000 está em uso. Parando processo..."
              lsof -ti:8000 | xargs kill -9
            fi
            
            if lsof -ti:5432 > /dev/null 2>&1; then
              echo "Porta 5432 está em uso. Parando processo..."
              lsof -ti:5432 | xargs kill -9
            fi
          fi
          
          # Parar nginx do sistema se estiver rodando
          echo "Verificando se nginx do sistema está rodando..."
          if systemctl is-active --quiet nginx; then
            echo "Parando nginx do sistema..."
            sudo systemctl stop nginx
          fi
          
          # Login no GitHub Container Registry no servidor
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Parar containers existentes e remover órfãos
          echo "Parando containers existentes..."
          docker compose down --remove-orphans 2>/dev/null || docker-compose down --remove-orphans 2>/dev/null || true
          
          # Remover imagens antigas para economizar espaço
          echo "Removendo imagens antigas..."
          docker image prune -f
          
          # Pull das imagens mais recentes do registry
          echo "Fazendo pull das imagens mais recentes..."
          docker compose pull 2>/dev/null || docker-compose pull
          
          # Verificar se o pull foi bem-sucedido
          if [ $? -ne 0 ]; then
            echo "❌ ERRO: Falha no pull das imagens!"
            exit 1
          fi
          
          echo "✅ Pull das imagens concluído com sucesso"
          
          # Iniciar os containers
          echo "Iniciando containers..."
          docker compose up -d --remove-orphans 2>/dev/null || docker-compose up -d --remove-orphans
          
          # Verificar se o deploy foi bem-sucedido
          if [ $? -ne 0 ]; then
            echo "❌ ERRO: Falha ao iniciar containers!"
            echo "Verificando logs de erro..."
            docker compose logs 2>/dev/null || docker-compose logs
            exit 1
          fi
          
          # Aguardar um pouco para os containers inicializarem
          echo "Aguardando inicialização dos containers..."
          sleep 15
          
          # Verificar se os containers estão rodando
          echo "Verificando status dos containers:"
          docker ps
          
          # Verificar logs dos containers para debug
          echo "Logs do frontend:"
          docker compose logs frontend --tail=10 2>/dev/null || docker-compose logs frontend --tail=10
          
          echo "Logs da API:"
          docker compose logs api --tail=10 2>/dev/null || docker-compose logs api --tail=10
          
          echo "Logs do PostgreSQL:"
          docker compose logs postgres --tail=10 2>/dev/null || docker-compose logs postgres --tail=10
          
          # Verificar se todos os containers estão rodando
          RUNNING_CONTAINERS=$(docker ps --format "table {{.Names}}" | grep -E "(frontend|api|postgres)" | wc -l)
          if [ "$RUNNING_CONTAINERS" -lt 3 ]; then
            echo "❌ ERRO: Nem todos os containers estão rodando!"
            echo "Containers rodando: $RUNNING_CONTAINERS/3"
            echo "Verificando logs de erro detalhados..."
            docker compose logs 2>/dev/null || docker-compose logs
            exit 1
          fi
          
          echo "✅ Deploy realizado com sucesso em: $(date)"
          echo "✅ Todos os containers estão rodando: $RUNNING_CONTAINERS/3"